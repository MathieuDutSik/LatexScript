#!/usr/bin/perl -w
$uu=scalar(@ARGV);
if ($uu eq 0 || $uu eq 1)
{
    print "LATEX_SimpleCopyForEdit TARGETDIR [File1] [File2] ....\n";
    print "with TARGETDIR being the directory in which files are put\n";
    print "with [Filei] being a tex file\n";
    print "\n";
    print "assumptions:\n";
    print "--there is only one image file per line at most\n";
    print "--Line with input begin by \input and nothing before\n";
    print "--full filename appear in the text, there is no implicit .eps, .tex and so on\n";
    print "\n";
    print "The result is that the files [File1] [File2] ...\n";
    print "are copied with their dependencies in TARGETDIR\n";
    print "and put in directory TARGET\n";
    print "copied as well are .fig files if existing\n";
    print "and makefile so that the compilation works.\n";
    die;
}


sub ExtractFromEpsfigLine($)
{
    my ($TheLine)=@_;
    @V2=split("epsfig{", $TheLine);
    @V3=split("}", $V2[1]);
    @V4=split(",", $V3[0]);
    for ($iEnt=1; $iEnt<=scalar(@V4); $iEnt++)
    {
	$_=$V4[$iEnt-1];
	s/ //;
	@V5=split("=", $_);
	if ($V5[0] eq "file" || $V5[0] eq "figure")
	{
	    return $V5[1];
	}
    }
}


sub ExtractFromInputLine($)
{
    my ($TheLine)=@_;
    @V2=split("input", $TheLine);
    if ($V2[0] ne "\\")
    {
	return "Z6PO_WVJJFHHNSD";
#	print "LINE=".$TheLine;
#	print "You break the rule on the inputs\n";
#	die;
    }
    @V3=split("}", $V2[1]);
    $_=$V3[0];
    s/\n//;
    s/ //;
    s/{//;
    return $_
}

sub GetTheSuffix($)
{
    my ($TheLine)=@_;
    @V2=split("", $TheLine);
    @V2=split("", $TheLine);
    @ListIndices=();
    for ($iChar=1; $iChar<=scalar(@V2); $iChar++)
    {
	if ($V2[$iChar-1] eq ".")
	{
	    $ListIndices[scalar(@ListIndices)]=$iChar;
	}
    }
    if (scalar(@ListIndices) eq 0)
    {
	$LimitChar=scalar(@V2)+1;
    }
    else
    {
	$LimitChar=$ListIndices[scalar(@ListIndices)-1]+1;
    }
    $suffix="";
    for ($iChar=$LimitChar; $iChar<=scalar(@V2); $iChar++)
    {
	$suffix=$suffix.$V2[$iChar-1];
    }
    return $suffix;
}



sub GetThePrefix($)
{
    my ($TheLine)=@_;
    @V2=split("", $TheLine);
    @ListIndices=();
    for ($iChar=1; $iChar<=scalar(@V2); $iChar++)
    {
	if ($V2[$iChar-1] eq ".")
	{
	    $ListIndices[scalar(@ListIndices)]=$iChar;
	}
    }
    if (scalar(@ListIndices) eq 0)
    {
	$LimitChar=scalar(@V2)+1;
    }
    else
    {
	$LimitChar=$ListIndices[scalar(@ListIndices)-1]-1;
    }
#    print "LimitChar=".$LimitChar."\n";
    $prefix="";
    for ($iChar=1; $iChar<=$LimitChar; $iChar++)
    {
	$prefix=$prefix.$V2[$iChar-1];
    }
    return $prefix;
}




sub ShallFileBeOpenedAtAll($)
{
    my ($TheFile)=@_;
    $suffix=GetTheSuffix($TheFile);
    if ($suffix eq "")
    {
	return 0;
    }
    if ($suffix eq "tex" || $suffix eq "latex" || $suffix eq "pdf_t" || $suffix eq "pstex_t")
    {
	return 1;
    }
    if ($suffix eq "sty")
    {
	return 0;
    }
    if ($suffix eq "pstex" || $suffix eq "ps" || $suffix eq "pdf" || $suffix eq "eps")
    {
	return 0;
    }
    return 0;
}

sub GetCorrespondingFigName($)
{
    my ($TheFile)=@_;
    $IsOKforCorresp=0;
    if ($suffix eq "eps")
    {
	$IsOKforCorresp=1;
	$lenCorresp=3;
    }
    if ($suffix eq "pdf_t")
    {
	$IsOKforCorresp=1;
	$lenCorresp=5;
    }
    if ($suffix eq "pstex_t")
    {
	$IsOKforCorresp=1;
	$lenCorresp=7;
    }
    if ($IsOKforCorresp eq 1)
    {
	@BSLKUT=split("", $TheFile);
	$retStringCorresp="";
	for ($iCharCorresp=1; $iCharCorresp<=scalar(@BSLKUT)-$lenCorresp; $iCharCorresp++)
	{
	    $retStringCorresp=$retStringCorresp.$BSLKUT[$iCharCorresp-1];
	}
	$retStringCorresp=$retStringCorresp."fig";
	return $retStringCorresp;
    }
    return "BULGROZ vie toujours!";
}





sub ExtractFileNameFromLine($)
{
    my ($line)=@_;
    @V=split("", $line);
    if ($V[0] eq "%")
    {
	return "Z6PO_WVJJFHHNSD";
    }
    @V=split("includegraphics", $line);
    if (scalar(@V) > 2)
    {
	print "You broke the assumption of only one file per line\n";
	die;
    }
    if (scalar(@V) > 1)
    {
	@WRL=split("{", $V[1]);
	$h=$WRL[1];
	@V2=split("}", $h);
	$file=$V2[0];
	return $file;
    }
    @V=split("epsfig", $line);
    if (scalar(@V) >2)
    {
	print "You broke the assumption of at most one epfig per line\n";
	die;
    }
    if (scalar(@V) > 1)
    {
	@V=split("documentclass", $line);
	if (scalar(@V) > 1)
	{
	    return "Z6PO_WVJJFHHNSD";
	}
	@V=split("usepackage", $line);
	if (scalar(@V) eq 1)
	{
	    $file=ExtractFromEpsfigLine($line);
	    return $file;
	}
    }
    @V=split("epsffile{", $line);
    if (scalar(@V) >2)
    {
	print "You broke the assumption of at most one epsffile per line\n";
	die;
    }
    if (scalar(@V) > 1)
    {
	@V2=split("}", $V[1]);
	$file=$V2[0];
	return $file;
    }
    @V=split("\\input", $line);
    if (scalar(@V) >2)
    {
	print "You broke the assumption of at  most one input per line\n";
	die;
    }
    if (scalar(@V) > 1)
    {
	$file=ExtractFromInputLine($line);
	return $file;
    }
    return "Z6PO_WVJJFHHNSD";
}




sub ListCall($)
{
    my ($FileName)=@_;
    my @MatchedSymbol=();
    open(INFILE, $FileName) or die "impossible to open ".$FileName;
    @B=<INFILE>;
    close(INFILE);
    for ($iLine=1; $iLine<=scalar(@B); $iLine++)
    {
	$line=$B[$iLine-1];
	$file=ExtractFileNameFromLine($line);
	if ($file ne "Z6PO_WVJJFHHNSD")
	{
	    $MatchedSymbol[scalar(@MatchedSymbol)]=$file;
	}
    }
    @MatchedSymbol;
}


$TARGET=$ARGV[0];

@ListFileNames=();
@ListFileStatus=();
@Openable=();
sub InsertFileInDatabase($)
{
    my ($FileName)=@_;
    for ($kFile=1; $kFile<=scalar(@ListFileNames); $kFile++)
    {
	if ($ListFileNames[$kFile-1] eq $FileName)
	{
	    return;
	}
    }
    open(INFILE, $FileName) or die "impossible to open ".$FileName;
    close(INFILE);
    $ListFileNames[scalar(@ListFileNames)]=$FileName;
    $ListFileStatus[scalar(@ListFileStatus)]=0;
    $Openable[scalar(@Openable)]=ShallFileBeOpenedAtAll($FileName);
    #
    $ThePrefixLocal=GetThePrefix($FileName);
    $TheBBLfile=$ThePrefixLocal.".bbl";
    if (-e $TheBBLfile)
    {
	$ListFileNames[scalar(@ListFileNames)]=$TheBBLfile;
	$ListFileStatus[scalar(@ListFileStatus)]=0;
	$Openable[scalar(@Openable)]=0;
    }
    #
    $correspFile=GetCorrespondingFigName($FileName);
    if ($correspFile ne "BULGROZ vie toujours!" && -e $correspFile)
    {
	$ListFileNames[scalar(@ListFileNames)]=$correspFile;
	$ListFileStatus[scalar(@ListFileStatus)]=0;
	$Openable[scalar(@Openable)]=0;
    }
}


$FileLS="/tmp/ListFile";
$order="ls *.cls *.clo *.sty > ".$FileLS;
print $order."\n";
system $order;
open(INF, $FileLS) or die "impossible to open ".$FileLS;
while(<INF>)
{
    chomp($_);
    $eFileCLS=$_;
    InsertFileInDatabase($eFileCLS);
}
close(INF);
$order="rm -f ".$FileLS;
print $order."\n";
system $order;

for ($i=2; $i<=scalar(@ARGV); $i++)
{
    $NewFile=$ARGV[$i-1];
    InsertFileInDatabase($NewFile);
}
$ListMakefileName[0]="makefile";
$ListMakefileName[1]="Makefile";
for ($iMake=1; $iMake<=scalar(@ListMakefileName); $iMake++)
{
    $TheMakefile=$ListMakefileName[$iMake-1];
    if (-e $TheMakefile)
    {
	InsertFileInDatabase($TheMakefile);
    }
}




while(1)
{
    $nbEntry=scalar(@ListFileNames);
    $IsFinished=1;
    for ($iFile=1; $iFile<=$nbEntry; $iFile++)
    {
	$FileName=$ListFileNames[$iFile-1];
	$test=$Openable[$iFile-1];
	if ($ListFileStatus[$iFile-1] eq 0 && $test eq 1)
	{
	    $IsFinished=0;
	    print "Considering insertion from ".$FileName."\n";
	    $ListFileStatus[$iFile-1]=1;
	    @VSYMB=ListCall($FileName);
	    for ($iSymb=1; $iSymb<=scalar(@VSYMB); $iSymb++)
	    {
		$NewFile=$VSYMB[$iSymb-1];
		InsertFileInDatabase($NewFile);
	    }
	}
    }
    if ($IsFinished eq 1)
    {
	last;
    }
}

sub LineSubstitution($$$)
{
    my ($line, $patt1, $patt2)=@_;
    @V=split("", $line);
    @PAT1=split("", $patt1);
    $nb=scalar(@V);
    $nb1=scalar(@PAT1);
    for ($idx=1; $idx<=$nb+1-$nb1; $idx++)
    {
	$ch1="";
	for ($i=1; $i<=$idx-1; $i++)
	{
	    $ch1=$ch1.$V[$i-1];
	}
	$ch2="";
	for ($i=$idx; $i<=$idx+$nb1-1; $i++)
	{
	    $ch2=$ch2.$V[$i-1];
	}
	$ch3="";
	for ($i=$idx+$nb1; $i<=$nb; $i++)
	{
	    $ch3=$ch3.$V[$i-1];
	}
	if ($ch2 eq $patt1)
	{
	    $ret=$ch1.$patt2.$ch3;
	    return $ret;
	}
    }
}




sub MyDirectCopy($$)
{
    my ($FileName1, $FileName2)=@_;
    @U=split("/", $FileName2);
    for ($iLevel=1; $iLevel<=scalar(@U)-1; $iLevel++)
    {
	$TheDir=$U[0];
	for ($jLevel=2; $jLevel<=$iLevel; $jLevel++)
	{
	    $TheDir=$TheDir."/".$U[$jLevel-1];
	}
	if (not(-e $TheDir))
	{
	    mkdir $TheDir;
	}
    }
    $order="cp ".$FileName1." ".$FileName2;
    print $order."\n";
    system $order;
}



for ($iFile=1; $iFile<=scalar(@ListFileNames); $iFile++)
{
    $FileName1=$ListFileNames[$iFile-1];
    $FileName2=$TARGET."/".$ListFileNames[$iFile-1];
    print "Treating ".$FileName1."\n";
    print "   creating ".$FileName2."\n";
    MyDirectCopy($FileName1, $FileName2);
}

