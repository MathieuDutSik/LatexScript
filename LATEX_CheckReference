#!/usr/bin/perl -w
use strict;
use warnings;


my $uu=scalar(@ARGV);
if ($uu ne 1)
{
    print "LATEX_CheckReferece [TexFile]\n";
    print "with [TexFile] being a tex file\n";
    print "\n";
    print "it checks all references and:\n";
    print "--Check for whether eqref/ref is used for the right context\n";
    print "--Check for whether indicated references are cited at all\n";
    print "\n";
    print "It handles file with input and %\n";
    die;
}
my @ListStringProblem=();
my @ListStringStatistic=();


sub MySplit($$)
{
    my ($str1, $str2)=@_;
    my @RES=();
    my @SPL1=split("", $str1);
    my $nbChar1=scalar(@SPL1);
    my @SPL2=split("", $str2);
    my $nbChar2=scalar(@SPL2);
    print "nbChar1=".$nbChar1."  nbChar2=".$nbChar2."\n";
    my $str="";
    my $nbChar=0;
    my $FirstMatch=0;
    for (my $iChar=1; $iChar<=$nbChar2+1-$nbChar1; $iChar++)
    {
	my $test=1;
	for (my $iC=1; $iC<=$nbChar1; $iC++)
	{
	    if ($SPL2[$iChar+$iC-2] ne $SPL1[$iC-1])
	    {
		$test=0;
	    }
	}
	if ($test == 1 && $iChar == 1)
	{
	    $FirstMatch=1;
	}
	if ($test == 0)
	{
	    $str=$str.$SPL2[$iChar-1];
	    $nbChar++;
	}
	if ($test == 1)
	{
	    $RES[scalar(@RES)]=$str;
	    $str="";
	    $nbChar=0;
	}
    }
    for (my $iChar=$nbChar2+2-$nbChar1; $iChar<=$nbChar2; $iChar++)
    {
	my $eCharTest=$SPL2[$iChar-1];
	$str=$str.$SPL2[$iChar-1];
	print "iChar=".$iChar."  eChar=".$eCharTest."\n";
	$nbChar++;
    }
    $RES[scalar(@RES)]=$str;
    my @RES2=();
    my $iResBegin;
    if ($FirstMatch == 1)
    {
	$RES2[0]=$RES[0];
	$iResBegin=2;
    }
    else
    {
	$iResBegin=1;
    }
    for (my $iRes=$iResBegin; $iRes<=scalar(@RES); $iRes++)
    {
	my $strRed="";
	my @VSRRED=split("", $RES[$iRes-1]);
	my $nbCharRed=0;
	for (my $iChar=$nbChar1; $iChar<=scalar(@VSRRED); $iChar++)
	{
	    $strRed=$strRed.$VSRRED[$iChar-1];
	    $nbCharRed++;
	}
	print "nbCharRed=".$nbCharRed."  strRed=".$strRed."\n";
	if ($nbCharRed > 0)
	{
	    $RES2[scalar(@RES2)]=$strRed;
	}
    }
    @RES2;
}

sub ExtractFromInputLine($)
{
    my ($TheLine)=@_;
    my $strSPKbis="\\";
    $strSPKbis=$strSPKbis."input";
    my @V2=split($strSPKbis, $TheLine);
    if ($V2[0] ne "\\")
    {
	return "Z6PO_WVJJFHHNSD";
    }
    my @V3=split("}", $V2[1]);
    $_=$V3[0];
    s/ //;
    s/{//;
    s/\n//;
    return $_
}




sub ExtractFileNameFromLine($)
{
    my ($line)=@_;
    $_=$line;
    s/\n//;
    $line=$_;
    my @V=split("input", $line);
    if (scalar(@V) >2)
    {
	print "You broke the assumption of only one file per line\n";
	die;
    }
    if (scalar(@V) > 1)
    {
	my $file=ExtractFromInputLine($line);
	return $file;
    }
    return "Z6PO_WVJJFHHNSD";
}


sub PercentSplitting($)
{
    my ($strToSplit) = @_;
    my @U=split("%", $strToSplit);
    my $retPercentSplit=$U[0];
    for (my $idxSplit=1; $idxSplit<=scalar(@U)-1; $idxSplit++)
    {
	my @Lsplit=split("", $U[$idxSplit-1]);
	my $len=scalar(@Lsplit);
	if ($len > 0 && $Lsplit[$len-1] ne "\\")
	{
	    $retPercentSplit=$retPercentSplit."%".$U[$idxSplit];
	}
	else
	{
	    return $retPercentSplit;
	}
    }
    return $retPercentSplit;
}


sub ListCall($)
{
    my ($FileName)=@_;
    my @MatchedSymbol=();
    open(INFILE, $FileName) or die "impossible to open ".$FileName;
    my @B=<INFILE>;
    close(INFILE);
    for (my $iLine=1; $iLine<=scalar(@B); $iLine++)
    {
	my $line=$B[$iLine-1];
	my $eLinePercSplit=PercentSplitting($line);
	my $file=ExtractFileNameFromLine($eLinePercSplit);
	if ($file ne "Z6PO_WVJJFHHNSD")
	{
	    $MatchedSymbol[scalar(@MatchedSymbol)]=$file;
	}
    }
    @MatchedSymbol;
}

sub GetTheSuffix($)
{
    my ($TheLine)=@_;
    my @V2=split("", $TheLine);
    my @ListIndices=();
    for (my $iChar=1; $iChar<=scalar(@V2); $iChar++)
    {
	if ($V2[$iChar-1] eq ".")
	{
	    $ListIndices[scalar(@ListIndices)]=$iChar;
	}
    }
    my $LimitChar;
    if (scalar(@ListIndices) eq 0)
    {
	$LimitChar=scalar(@V2)+1;
    }
    else
    {
	$LimitChar=$ListIndices[scalar(@ListIndices)-1]+1;
    }
    my $suffix="";
    for (my $iChar=$LimitChar; $iChar<=scalar(@V2); $iChar++)
    {
	$suffix=$suffix.$V2[$iChar-1];
    }
    return $suffix;
}



sub GetThePrefix($)
{
    my ($TheLine)=@_;
    my @V2=split("", $TheLine);
    my @ListIndices=();
    for (my $iChar=1; $iChar<=scalar(@V2); $iChar++)
    {
	if ($V2[$iChar-1] eq ".")
	{
	    $ListIndices[scalar(@ListIndices)]=$iChar;
	}
    }
    my $LimitChar;
    if (scalar(@ListIndices) eq 0)
    {
	$LimitChar=scalar(@V2)+1;
    }
    else
    {
	$LimitChar=$ListIndices[scalar(@ListIndices)-1]-1;
    }
    my $prefix="";
    for (my $iChar=1; $iChar<=$LimitChar; $iChar++)
    {
	$prefix=$prefix.$V2[$iChar-1];
    }
    return $prefix;
}

sub ShallFileBeOpenedAtAll($)
{
    my ($TheLine)=@_;
    my $suffix=GetTheSuffix($TheLine);
    if ($suffix eq "")
    {
	return 0;
    }
    if ($suffix eq "tex" || $suffix eq "latex" || $suffix eq "pdf_t" || $suffix eq "pstex_t")
    {
	return 1;
    }
    if ($suffix eq "sty")
    {
	return 0;
    }
    if ($suffix eq "pstex" || $suffix eq "ps" || $suffix eq "pdf" || $suffix eq "eps")
    {
	return 0;
    }
    return 0;
}


my @ListFileNames=();
my @Openable=();
my @ListFileStatus=();
sub FuncInsertInDatabase($)
{
    my ($FileName)=@_;
    for (my $kFile=1; $kFile<=scalar(@ListFileNames); $kFile++)
    {
	if ($ListFileNames[$kFile-1] eq $FileName)
	{
	    return;
	}
    }
    open(INFILE, $FileName) or die "impossible to open ".$FileName;
    close(INFILE);
    my $insertVal=scalar(@ListFileNames);
    $ListFileNames[$insertVal]=$FileName;
    $ListFileStatus[$insertVal]=0;
    $Openable[$insertVal]=ShallFileBeOpenedAtAll($FileName);
}



for (my $i=1; $i<=scalar(@ARGV); $i++)
{
    my $NewFile=$ARGV[$i-1];
    FuncInsertInDatabase($NewFile);
}
while(1)
{
    my $nbEntry=scalar(@ListFileNames);
    my $IsFinished=1;
    for (my $iFile=1; $iFile<=$nbEntry; $iFile++)
    {
	my $FileName=$ListFileNames[$iFile-1];
	my $test=$Openable[$iFile-1];
	if ($ListFileStatus[$iFile-1] eq 0)
	{
	    $ListFileStatus[$iFile-1]=1;
	    $IsFinished=0;
	    if ($test eq 1)
	    {
		my @VSYMB=ListCall($FileName);
		for (my $iSymb=1; $iSymb<=scalar(@VSYMB); $iSymb++)
		{
		    my $NewFile=$VSYMB[$iSymb-1];
		    FuncInsertInDatabase($NewFile);
		}
	    }
	}
    }
    if ($IsFinished eq 1)
    {
	last;
    }
}



my @LISTREFname=();
my @LISTREFtype=();
my @LISTREFnr=();
sub FuncInsertRef($$)
{
    my ($TheWorkCit, $TheType) = @_;
    for (my $jCit=1; $jCit<=scalar(@LISTREFname); $jCit++)
    {
	if ($LISTREFname[$jCit-1] eq $TheWorkCit && $LISTREFtype[$jCit-1] eq $TheType)
	{
	    $LISTREFnr[$jCit-1]++;
	    return;
	}
    }
    my $nb=scalar(@LISTREFname);
    $LISTREFname[$nb]=$TheWorkCit;
    $LISTREFtype[$nb]=$TheType;
    $LISTREFnr[$nb]=1;
}


for (my $iFile=1; $iFile<=scalar(@ListFileNames); $iFile++)
{
    my $FileName=$ListFileNames[$iFile-1];
    my $test=$Openable[$iFile-1];
    if ($test eq 1)
    {
	open(INFILE, $FileName);
#	print "open FileName=".$FileName."\n";
	my $IsInTheorem=0;
	my $IsInTable=0;
	my $IsInFigure=0;
	my $IsInEquation=0;
	my $IsInEquationStar=0;
	my $iLine=0;
	while(<INFILE>)
	{
	    my $eLine=$_;
	    $iLine++;
	    my $strSplPerc=PercentSplitting($eLine);
	    my @L2=split("begin{", $strSplPerc);
	    if (scalar(@L2) > 2)
	    {
		print "You should put one begin per line\n";
		die;
	    }
	    if (scalar(@L2) == 2)
	    {
		my @L3=split("}", $L2[1]);
		if ($L3[0] eq "theorem" || $L3[0] eq "corollary" || $L3[0] eq "proposition" || $L3[0] eq "lemma" || $L3[0] eq "problem" || $L3[0] eq "definition" || $L3[0] eq "conjecture" || $L3[0] eq "remark" || $L3[0] eq "problem")
		{
		    $IsInTheorem=1;
		}
		if ($L3[0] eq "equation")
		{
		    $IsInEquation=1;
		    my @L2label=split("label{", $strSplPerc);
		    if (scalar(@L2label) eq 1)
		    {
			my $stringPb="In file ".$FileName." line ".$iLine." we have equation but no label\n";
			$ListStringProblem[scalar(@ListStringProblem)]=$stringPb;
		    }
		}
		if ($L3[0] eq "equation*")
		{
		    $IsInEquationStar=1;
		}
		if ($L3[0] eq "table")
		{
		    $IsInTable=1;
		}
		if ($L3[0] eq "figure")
		{
		    $IsInFigure=1;
		}
	    }
	    #
	    my @L2=split("end{", $strSplPerc);
	    if (scalar(@L2) > 2)
	    {
		print "You should put one begin per line\n";
		die;
	    }
	    if (scalar(@L2) == 2)
	    {
		my @L3=split("}", $L2[1]);
		if ($L3[0] eq "theorem" || $L3[0] eq "corollary" || $L3[0] eq "proposition" || $L3[0] eq "lemma" || $L3[0] eq "problem" || $L3[0] eq "definition" || $L3[0] eq "conjecture" || $L3[0] eq "remark" || $L3[0] eq "problem")
		{
		    $IsInTheorem=0;
		}
		if ($L3[0] eq "equation")
		{
		    $IsInEquation=0;
		}
		if ($L3[0] eq "equation*")
		{
		    $IsInEquationStar=0;
		}
		if ($L3[0] eq "table")
		{
		    $IsInTable=0;
		}
		if ($L3[0] eq "figure")
		{
		    $IsInFigure=0;
		}
	    }
	    #
	    @L2=split("label{", $strSplPerc);
	    if (scalar(@L2) > 2)
	    {
		print "You should put one begin per line\n";
		die;
	    }
	    if (scalar(@L2) == 2)
	    {
		my @L3=split("}", $L2[1]);
		if ($IsInEquation eq 1)
		{
		    FuncInsertRef($L3[0], "equation");
		}
		else
		{
		    if ($IsInEquationStar eq 1)
		    {
			FuncInsertRef($L3[0], "equationStar");
		    }
		    else
		    {
			if ($IsInTheorem eq 1)
			{
			    FuncInsertRef($L3[0], "theorem");
			}
			if ($IsInTable eq 1)
			{
			    FuncInsertRef($L3[0], "table");
			}
			if ($IsInFigure eq 1)
			{
			    FuncInsertRef($L3[0], "figure");
			}
		    }
		}
	    }
	    #
	    @L2=split("ref{", $strSplPerc);
	    if (scalar(@L2) > 1)
	    {
		for (my $iL2=1; $iL2<=scalar(@L2)-1; $iL2++)
		{
		    my @Lspl=split("", $L2[$iL2-1]);
		    my $len=scalar(@Lspl);
		    my $typeref;
		    if ($len >=3 && $Lspl[$len-3] eq "\\" && $Lspl[$len-2] eq "e" && $Lspl[$len-1] eq "q")
		    {
			$typeref="eqref";
		    }
		    else
		    {
			if ($len >= 1 && $Lspl[$len-1] eq "\\")
			{
			    $typeref="ref";
			}
			else
			{
			    $typeref="unknown";
			}
		    }
		    my @Lspl2=split("}", $L2[$iL2]);
		    my $refName=$Lspl2[0];
		    FuncInsertRef($refName, $typeref);
		}
	    }

	}
	close(INFILE);
    }
}

my @LISTREFnature=();
for (my $iCit=1; $iCit<=scalar(@LISTREFname); $iCit++)
{
    my $TheCit=$LISTREFname[$iCit-1];
    my $TheNature=$LISTREFtype[$iCit-1];
    my $eNature="unset";
    if ($TheNature ne "ref" || $TheNature ne "eqref" || $TheNature ne "unknown")
    {
	$eNature="unset";
	for (my $jCit=1; $jCit<=scalar(@LISTREFname); $jCit++)
	{
	    if ($iCit ne $jCit)
	    {
		if ($LISTREFname[$jCit-1] eq $TheCit)
		{
		    $eNature=$LISTREFtype[$jCit-1];
		}
	    }
	}
	if ($TheNature eq "theorem" && $eNature eq "eqref")
	{
	    my $stringPb="Reference ".$TheCit." is used for theorem but with eqref\n";
	    $ListStringProblem[scalar(@ListStringProblem)]=$stringPb;
	}
	if ($TheNature eq "table" && $eNature eq "eqref")
	{
	    my $stringPb="Reference ".$TheCit." is used for table but with eqref\n";
	    $ListStringProblem[scalar(@ListStringProblem)]=$stringPb;
	}
	if ($TheNature eq "figure" && $eNature eq "eqref")
	{
	    my $stringPb="Reference ".$TheCit." is used for figure but with eqref\n";
	    $ListStringProblem[scalar(@ListStringProblem)]=$stringPb;
	}
	if ($TheNature eq "equationStar")
	{
	    my $stringPb="Maybe we should not put label for equation*, here label=".$TheCit."\n";
	    $ListStringProblem[scalar(@ListStringProblem)]=$stringPb;
	}
	if ($TheNature eq "equation" && $eNature eq "ref")
	{
	    my $stringPb="Reference ".$TheCit." is used for equation but with ref\n";
	    $ListStringProblem[scalar(@ListStringProblem)]=$stringPb;
	}
	if ($TheNature eq "equation" && $eNature eq "unset")
	{
	    my $stringPb="Reference ".$TheCit." is used for equation but never used\n";
	    $ListStringProblem[scalar(@ListStringProblem)]=$stringPb;
	}
    }
    $LISTREFnature[$iCit-1]=$eNature;
}


for (my $iStat=1; $iStat<=scalar(@ListStringStatistic); $iStat++)
{
#    $eStat=$ListStringStatistic[$iStat-1]
#    print $eStat;
}

if (scalar(@ListStringProblem) eq 0)
{
    print "All reference seems to be ok\n";
}
else
{
    print "List of found problems\n";
    for (my $iPb=1; $iPb<=scalar(@ListStringProblem); $iPb++)
    {
	my $ePb=$ListStringProblem[$iPb-1];
	print $ePb;
    }
}
print "NOTE: this program complements latex reference system.\n";
print "it does not dispense from reading the .log file\n";
