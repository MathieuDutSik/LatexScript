#!/usr/bin/perl -w
use strict;
use warnings;

my $uu=scalar(@ARGV);
if ($uu ne 2)
{
    print "LATEX_MakeArxivArch [TheArch] [File]\n";
    print "with [TheArch] the arxiv arch in the form MyPaper.tar.gz\n";
    print "with [File] the .tex file\n";
    print "\n";
    print "it uses preceding functions for that goal\n";
    print "and is subject to the very same limitations\n";
    print "\n";
    print "---The program remove remarks in percent\n";
    print "---The program creates an archive ready for submission\n";
    print "---The directory structure is unfolded\n";
    print "\n";
    die;
}

my $TheArch=$ARGV[0];
my $File=$ARGV[1];

#
# determine temporary directory
my $TheRand=int(rand(1000000));
print "TheRand=".$TheRand."\n";
my $WorkDir="tmp".$TheRand;
print "WorkDir=".$WorkDir."\n";
my $TmpDir="/tmp/".$WorkDir;

my $order;

$order="mkdir ".$TmpDir;
print $order."\n";
if (system($order) != 0) {
    die "Error in mkdir";
}

sub TheCleanUp()
{
    $order="rm -rf ".$TmpDir;
    print $order."\n";
    if (system($order) != 0) {
	die "Error in rm -rf";
    }
}

my @WK=split("", $File);
my $len=scalar(@WK);
my $FileRed="";
if ($WK[$len-4] eq "." && $WK[$len-3] eq "t" && $WK[$len-2] eq "e" && $WK[$len-1] eq "x")
{
    for (my $iChar=1; $iChar<=$len-4; $iChar++)
    {
	my $eChar=$WK[$iChar-1];
	$FileRed=$FileRed.$eChar;
    }
}
else
{
    print "The filename should end in .tex\n";
    print "File=".$File."\n";
    die;
}

#
# Determining if we need to use latex or pdflatex
#

open(INF, $File) or die "impossible to open ".$File;
my @WKR=<INF>;
close(INF);

my $LatexString = "latex";
for (my $iW=0; $iW<scalar(@WKR); $iW++)
{
    my @BS=split("includegraphics", $WKR[$iW]);
    if (scalar(@WKR) > 1)
    {
        my @BS2 = split("pdf", $BS[1]);
        if (scalar(@BS2) > 1)
        {
            $LatexString = "pdflatex";
        }
    }
}



#
# determine archive name
#

my @U=split("/", $TheArch);
my $TheName=$U[scalar(@U)-1];
my @VL=split("", $TheName);
my $nb=scalar(@VL);
if ($VL[$nb-1] ne "z" || $VL[$nb-2] ne "g" || $VL[$nb-3] ne "\." || $VL[$nb-4] ne "r" || $VL[$nb-5] ne "a" || $VL[$nb-6] ne "t" || $VL[$nb-7] ne "\.")
{
    print "Archive name should finish in .tar.gz\n";
    TheCleanUp();
    die;
}
my @TSL=split("", $TheArch);
if ($TSL[0] ne "/")
{
    print "The archive name should be an absolute name\n";
    TheCleanUp();
    die;
}


my $eStr="";
for (my $iChar=1; $iChar<=$nb-7; $iChar++)
{
    $eStr=$eStr.$VL[$iChar-1];
}
print "Archive name=".$eStr."\n";
my $SaveDir=$TmpDir."/".$eStr;
my $CompilDir=$TmpDir."/compil";

$order="mkdir ".$SaveDir;
print $order."\n";
if (system($order) != 0) {
    die "Error in mkdir ".$SaveDir;
}

my $Temporary1="./Temporary_File1.tex";
my $Temporary2="./Temporary_File2.tex";

$order="LATEX_RemovePercentLine < ".$File." > ".$Temporary1;
print $order."\n";
if (system($order) != 0) {
    die "Error in LATEX_RemovePercentLine";
}

$order="LATEX_DirectoryUnfold ".$SaveDir." ".$Temporary1;
print $order."\n";
if (system($order) != 0) {
    die "Error in LATEX_DirectoryUnfold";
}

my $Temporary1_ext=$SaveDir."/".$Temporary1;
my $Temporary2_ext=$SaveDir."/".$Temporary2;

$order="LATEX_EliminateAfterEndDocument ".$Temporary1_ext." > ".$Temporary2_ext;
print $order."\n";

if (system($order) != 0) {
    die "Error in LATEX_EliminateAfterEndDocument";
}

print "SaveDir=".$SaveDir."\n";
$order="(cd ".$SaveDir." && rm -f ".$Temporary1." && mv ".$Temporary2." ".$File.")";
print $order."\n";
if (system($order) != 0) {
    die "Error in mv operation";
}

sub MySplitTwo($$)
{
    my ($strpart, $strtot) = @_;
    my @Vpart=split("", $strpart);
    my $lenpart=scalar(@Vpart);
    my @Vtot=split("", $strtot);
    my $lentot=scalar(@Vtot);
    for (my $shift=0; $shift<$lentot-$lenpart; $shift++)
    {
        my $test=1;
        for (my $jChar=0; $jChar<$lenpart; $jChar++)
        {
            my $eChar=$Vpart[$jChar];
            my $fChar=$Vtot[$shift + $jChar];
            if ($eChar ne $fChar)
            {
                $test=0;
            }
        }
        if ($test eq 1)
        {
            my $str1="";
            for (my $iChar=0; $iChar<$shift; $iChar++)
            {
                $str1=$str1.$Vtot[$iChar];
            }
            my $str2="";
            for (my $iChar=$shift+$lenpart; $iChar<$lentot; $iChar++)
            {
                $str2=$str2.$Vtot[$iChar];
            }
            my @US=($str1, $str2);
            return @US;
        }
    }
    return $strtot;
}


my $TotalFileTex=$SaveDir."/".$File;
#print "TotalFileTex=".$TotalFileTex."\n";
#print "File=".$File."\n";
open(INFILE, $TotalFileTex) or die "impossible to open ".$TotalFileTex;
my @B=<INFILE>;
close(INFILE);
my $HasBibliography=0;
my $HasBibliographyStyle=0;
my $nbLine=scalar(@B);
my ($BiblioFileBlock, $BiblioFileStyle);
for (my $iLine=1; $iLine<=$nbLine; $iLine++)
{
    if ($HasBibliography == 0)
    {
	my $line=$B[$iLine-1];
#	my @VL1=split("bibliography{", $line);
	my @VL1=MySplitTwo("bibliography{", $line);
	if (scalar(@VL1) > 1)
	{
	    my $eStr1=$VL1[1];
	    my @VS1=split("}", $eStr1);
	    $BiblioFileBlock=$VS1[0];
	    $HasBibliography=1;
	}
#	my @VL=split("bibliographystyle{", $line);
	my @VL2=MySplitTwo("bibliographystyle{", $line);
	if (scalar(@VL2) > 1)
	{
	    my $eStr1=$VL2[1];
	    my @VS2=split("}", $eStr1);
	    $BiblioFileStyle=$VS2[0];
	    $HasBibliographyStyle=1;
	}
    }
}
print "HasBibliography=".$HasBibliography."\n";



if ($HasBibliography eq 1)
{
    $order="cp -r ".$SaveDir." ".$CompilDir;
    print $order."\n";
    if (system($order) != 0) {
	die "Error in cp -r";
    }

    $order="(cd ".$CompilDir." && ".$LatexString." ".$File.")";
    print $order."\n";
    if (system($order) != 0) {
	die "Error in latex";
    }

    $order="(cd ".$CompilDir." && bibtex ".$FileRed.")";
    print $order."\n";
    if (system($order) != 0) {
	die "Error in bibtex";
    }

    my $eFile1=$SaveDir."/".$FileRed.".bbl";
    my $eFile2=$CompilDir."/".$FileRed.".bbl";
    $order="cp ".$eFile2." ".$eFile1;
    print $order."\n";
    if (system($order) != 0) {
	die "Error in cp";
    }

    my @BIB=split(",", $BiblioFileBlock);
    my $nbBib=scalar(@BIB);
    for (my $iBib=0; $iBib<$nbBib; $iBib++)
    {
	my $BiblioFile=$BIB[$iBib];
	my $eFile1=$SaveDir."/".$BiblioFile.".bib";
	$order="rm -f ".$eFile1;
	print $order."\n";
	if (system($order) != 0) {
	    die "Error in rm -f";
	}
    }

    my $eFile3=$SaveDir."/".$BiblioFileStyle.".bst";
    $order="rm -f ".$eFile3;
    print $order."\n";
    if (system($order) != 0) {
	die "Error in rm -f";
    }
}

$order="(cd ".$TmpDir." && tar -c ".$eStr. " | gzip > ".$TheArch.")";
print $order."\n";
if (system($order) != 0) {
    die "Error in tar";
}

$order="rm -f ".$Temporary1." ".$Temporary2;
print $order."\n";
if (system($order) != 0) {
    die "Error in rm -f";
}

#
# Now full cleanup

TheCleanUp();
