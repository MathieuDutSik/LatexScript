#!/usr/bin/perl -w
use strict;
use warnings;

my $uu=scalar(@ARGV);
if ($uu eq 0 || $uu eq 1)
{
    print "LATEX_SimpleCopy TARGETDIR [File1] [File2] ....\n";
    print "with TARGETDIR being the directory in which files are put\n";
    print "with [Filei] being a tex file\n";
    print "\n";
    print "assumptions:\n";
    print "--there is only one image file per line at most\n";
    print "--Line with input begin by \input and nothing before\n";
    print "--full filename appear in the text, there is no implicit .eps, .tex and so on\n";
    print "\n";
    print "The result is that the files [File1] [File2] ...\n";
    print "are copied with their dependencies in TARGETDIR\n";
    print "and put in directory TARGET\n";
    die;
}


sub ExtractFromEpsfigLine($)
{
    my ($TheLine)=@_;
    my @V2=split("epsfig{", $TheLine);
    my @V3=split("}", $V2[1]);
    my @V4=split(",", $V3[0]);
    for (my $iEnt=1; $iEnt<=scalar(@V4); $iEnt++)
    {
	$_=$V4[$iEnt-1];
	s/ //;
	my @V5=split("=", $_);
	if ($V5[0] eq "file" || $V5[0] eq "figure")
	{
	    return $V5[1];
	}
    }
}


sub ExtractFromInputLine($)
{
    my ($TheLine)=@_;
    my @V2=split("input", $TheLine);
    if ($V2[0] ne "\\")
    {
	return "Z6PO_WVJJFHHNSD";
#	print "LINE=".$TheLine;
#	print "You break the rule on the inputs\n";
#	die;
    }
    my @V3=split("}", $V2[1]);
    $_=$V3[0];
    s/\n//;
    s/ //;
    s/{//;
    return $_
}

sub GetTheSuffix($)
{
    my ($TheLine)=@_;
    my @V2=split("", $TheLine);
    my @V2=split("", $TheLine);
    my @ListIndices=();
    for (my $iChar=1; $iChar<=scalar(@V2); $iChar++)
    {
	if ($V2[$iChar-1] eq ".")
	{
	    $ListIndices[scalar(@ListIndices)]=$iChar;
	}
    }
    my $LimitChar;
    if (scalar(@ListIndices) eq 0)
    {
	$LimitChar=scalar(@V2)+1;
    }
    else
    {
	$LimitChar=$ListIndices[scalar(@ListIndices)-1]+1;
    }
    my $suffix="";
    for (my $iChar=$LimitChar; $iChar<=scalar(@V2); $iChar++)
    {
	$suffix=$suffix.$V2[$iChar-1];
    }
    return $suffix;
}


sub GetThePrefix($)
{
    my ($TheLine)=@_;
    my @V2=split("", $TheLine);
    my @ListIndices=();
    for (my $iChar=1; $iChar<=scalar(@V2); $iChar++)
    {
	if ($V2[$iChar-1] eq ".")
	{
	    $ListIndices[scalar(@ListIndices)]=$iChar;
	}
    }
    my $LimitChar;
    if (scalar(@ListIndices) eq 0)
    {
	$LimitChar=scalar(@V2)+1;
    }
    else
    {
	$LimitChar=$ListIndices[scalar(@ListIndices)-1]-1;
    }
    my $prefix="";
    for (my $iChar=1; $iChar<=$LimitChar; $iChar++)
    {
	$prefix=$prefix.$V2[$iChar-1];
    }
    return $prefix;
}




sub ShallFileBeOpenedAtAll($)
{
    my ($TheLine)=@_;
    my $suffix=GetTheSuffix($TheLine);
    if ($suffix eq "")
    {
	return 0;
    }
    if ($suffix eq "tex" || $suffix eq "latex" || $suffix eq "pdf_t" || $suffix eq "pstex_t")
    {
	return 1;
    }
    if ($suffix eq "sty")
    {
	return 0;
    }
    if ($suffix eq "pstex" || $suffix eq "ps" || $suffix eq "pdf" || $suffix eq "eps")
    {
	return 0;
    }
    return 0;
}



sub ExtractFileNameFromLine($)
{
    my ($line)=@_;
    my @V=split("", $line);
    if ($V[0] eq "%")
    {
	return "Z6PO_WVJJFHHNSD";
    }
    my @Vb=split("includegraphics", $line);
    if (scalar(@Vb) > 2)
    {
	print "You broke the assumption of only one file per line\n";
	die;
    }
    if (scalar(@Vb) > 1)
    {
	my @WRL=split("{", $Vb[1]);
	my $h=$WRL[1];
	my @V2=split("}", $h);
	my $file=$V2[0];
	return $file;
    }
    my @Vc=split("epsfig", $line);
    if (scalar(@Vc) >2)
    {
	print "You broke the assumption of at most one epfig per line\n";
	die;
    }
    if (scalar(@Vc) > 1)
    {
	my @V2=split("documentclass", $line);
	if (scalar(@V2) > 1)
	{
	    return "Z6PO_WVJJFHHNSD";
	}
	my @V2b=split("usepackage", $line);
	if (scalar(@V2b) eq 1)
	{
	    my $file=ExtractFromEpsfigLine($line);
	    return $file;
	}
    }
    #
    my @Vd=split("epsffile{", $line);
    if (scalar(@Vd) >2)
    {
	print "You broke the assumption of at most one epsffile per line\n";
	die;
    }
    if (scalar(@Vd) > 1)
    {
	my @V2=split("}", $Vd[1]);
	my $file=$V2[0];
	return $file;
    }
    #
    my @Ve=split("epsfbox{", $line);
    if (scalar(@Ve) >2)
    {
	print "You broke the assumption of at most one epsfbox per line\n";
	die;
    }
    if (scalar(@Ve) > 1)
    {
	my @V2=split("}", $Ve[1]);
	my $file=$V2[0];
	return $file;
    }
    #
    my @Vf=split("\\input", $line);
    if (scalar(@Vf) >2)
    {
	print "You broke the assumption of at  most one input per line\n";
	die;
    }
    if (scalar(@Vf) > 1)
    {
	my $file=ExtractFromInputLine($line);
	return $file;
    }
    return "Z6PO_WVJJFHHNSD";
}




sub ListCall($)
{
    my ($FileName)=@_;
    my @MatchedSymbol=();
    open(INFILE, $FileName) or die "impossible to open ".$FileName;
    my @B=<INFILE>;
    close(INFILE);
    for (my $iLine=1; $iLine<=scalar(@B); $iLine++)
    {
	my $line=$B[$iLine-1];
	my $file=ExtractFileNameFromLine($line);
	if ($file ne "Z6PO_WVJJFHHNSD")
	{
	    $MatchedSymbol[scalar(@MatchedSymbol)]=$file;
	}
    }
    @MatchedSymbol;
}


my $TARGET=$ARGV[0];

my @ListFileNames=();
my @ListFileStatus=();
my @Openable=();
sub InsertFileInDatabase($)
{
    my ($FileName)=@_;
    for (my $kFile=1; $kFile<=scalar(@ListFileNames); $kFile++)
    {
	if ($ListFileNames[$kFile-1] eq $FileName)
	{
	    return;
	}
    }
    open(INFILE, $FileName) or die "impossible to open ".$FileName;
    close(INFILE);
    $ListFileNames[scalar(@ListFileNames)]=$FileName;
    $ListFileStatus[scalar(@ListFileStatus)]=0;
    $Openable[scalar(@Openable)]=ShallFileBeOpenedAtAll($FileName);
    #
    my $ThePrefixLocal=GetThePrefix($FileName);
    my $TheBBLfile=$ThePrefixLocal.".bbl";
    if (-e $TheBBLfile)
    {
	$ListFileNames[scalar(@ListFileNames)]=$TheBBLfile;
	$ListFileStatus[scalar(@ListFileStatus)]=0;
	$Openable[scalar(@Openable)]=0;
    }
}


my $FileLS="/tmp/ListFile";
my $order;

$order="ls *.cls *.clo *.sty > ".$FileLS;
print $order."\n";
if (system($order) != 0) {
    die "Error while doing operation\n";
}

open(INF, $FileLS) or die "impossible to open ".$FileLS;
while(<INF>)
{
    chomp($_);
    my $eFileCLS=$_;
    InsertFileInDatabase($eFileCLS);
}
close(INF);

$order="rm -f ".$FileLS;
print $order."\n";
if (system($order) != 0) {
    die "Error while doing operation\n";
}


for (my $i=2; $i<=scalar(@ARGV); $i++)
{
    my $NewFile=$ARGV[$i-1];
    InsertFileInDatabase($NewFile);
}



while(1)
{
    my $nbEntry=scalar(@ListFileNames);
    my $IsFinished=1;
    for (my $iFile=1; $iFile<=$nbEntry; $iFile++)
    {
	my $FileName=$ListFileNames[$iFile-1];
	my $test=$Openable[$iFile-1];
	if ($ListFileStatus[$iFile-1] eq 0 && $test eq 1)
	{
	    $IsFinished=0;
	    print "Considering insertion from ".$FileName."\n";
	    $ListFileStatus[$iFile-1]=1;
	    my @VSYMB=ListCall($FileName);
	    for (my $iSymb=1; $iSymb<=scalar(@VSYMB); $iSymb++)
	    {
		my $NewFile=$VSYMB[$iSymb-1];
		InsertFileInDatabase($NewFile);
	    }
	}
    }
    if ($IsFinished eq 1)
    {
	last;
    }
}

sub LineSubstitution($$$)
{
    my ($line, $patt1, $patt2) =@_;
    my @V=split("", $line);
    my @PAT1=split("", $patt1);
    my $nb=scalar(@V);
    my $nb1=scalar(@PAT1);
    for (my $idx=1; $idx<=$nb+1-$nb1; $idx++)
    {
	my $ch1="";
	for (my $i=1; $i<=$idx-1; $i++)
	{
	    $ch1=$ch1.$V[$i-1];
	}
	my $ch2="";
	for (my $i=$idx; $i<=$idx+$nb1-1; $i++)
	{
	    $ch2=$ch2.$V[$i-1];
	}
	my $ch3="";
	for (my $i=$idx+$nb1; $i<=$nb; $i++)
	{
	    $ch3=$ch3.$V[$i-1];
	}
	if ($ch2 eq $patt1)
	{
	    my $ret=$ch1.$patt2.$ch3;
	    return $ret;
	}
    }
}




sub MyDirectCopy($$)
{
    my ($FileName1, $FileName2)=@_;
    my @U=split("/", $FileName2);
    for (my $iLevel=1; $iLevel<=scalar(@U)-1; $iLevel++)
    {
	my $TheDir=$U[0];
	for (my $jLevel=2; $jLevel<=$iLevel; $jLevel++)
	{
	    $TheDir=$TheDir."/".$U[$jLevel-1];
	}
	if (not(-e $TheDir))
	{
	    mkdir $TheDir;
	}
    }
    $order="cp ".$FileName1." ".$FileName2;
    print $order."\n";
    if (system($order) != 0) {
	die "Error while doing operation\n";
    }
}



for (my $iFile=1; $iFile<=scalar(@ListFileNames); $iFile++)
{
    my $FileName1=$ListFileNames[$iFile-1];
    my $FileName2=$TARGET."/".$ListFileNames[$iFile-1];
    print "Treating ".$FileName1."\n";
    print "   creating ".$FileName2."\n";
    MyDirectCopy($FileName1, $FileName2);
}

