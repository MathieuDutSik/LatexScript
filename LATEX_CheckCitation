#!/usr/bin/perl -w
use strict;
use warnings;


my $uu=scalar(@ARGV);
if ($uu ne 1)
{
    print "LATEX_CheckCitation [TexFile]\n";
    print "with [TexFile] being a tex file\n";
    print "\n";
    print "it checks all citations and:\n";
    print "--Check for bibliographical reference of same name\n";
    print "--Check for unused bibliographical references\n";
    print "--Check for overload of reference\n";
    print "--Return statistical information for correct references\n";
    print "\n";
    print "It handles file with input and %\n";
    print "Limitations: you have to use \\cite{...} or \\citep{....}\n";
    print "and no mixture of the two is allowed\n";
    die;
}


sub MySplit($$)
{
    my ($str1, $str2)=@_;
    my @RES=();
    my @SPL1=split("", $str1);
    my $nbChar1=scalar(@SPL1);
    my @SPL2=split("", $str2);
    my $nbChar2=scalar(@SPL2);
    print "nbChar1=".$nbChar1."  nbChar2=".$nbChar2."\n";
    my $str="";
    my $nbChar=0;
    my $FirstMatch=0;
    for (my $iChar=1; $iChar<=$nbChar2+1-$nbChar1; $iChar++)
    {
	my $test=1;
	for (my $iC=1; $iC<=$nbChar1; $iC++)
	{
	    if ($SPL2[$iChar+$iC-2] ne $SPL1[$iC-1])
	    {
		$test=0;
	    }
	}
	if ($test == 1 && $iChar == 1)
	{
	    $FirstMatch=1;
	}
	if ($test == 0)
	{
	    $str=$str.$SPL2[$iChar-1];
	    $nbChar++;
	}
	if ($test == 1)
	{
	    $RES[scalar(@RES)]=$str;
	    $str="";
	    $nbChar=0;
	}
    }
    for (my $iChar=$nbChar2+2-$nbChar1; $iChar<=$nbChar2; $iChar++)
    {
	my $eCharTest=$SPL2[$iChar-1];
	$str=$str.$SPL2[$iChar-1];
	print "iChar=".$iChar."  eChar=".$eCharTest."\n";
	$nbChar++;
    }
    $RES[scalar(@RES)]=$str;
    my @RES2=();
    my $iResBegin;
    if ($FirstMatch == 1)
    {
	$RES2[0]=$RES[0];
	$iResBegin=2;
    }
    else
    {
	$iResBegin=1;
    }
    for (my $iRes=$iResBegin; $iRes<=scalar(@RES); $iRes++)
    {
	my $strRed="";
	my @VSRRED=split("", $RES[$iRes-1]);
	my $nbCharRed=0;
	for (my $iChar=$nbChar1; $iChar<=scalar(@VSRRED); $iChar++)
	{
	    $strRed=$strRed.$VSRRED[$iChar-1];
	    $nbCharRed++;
	}
	print "nbCharRed=".$nbCharRed."  strRed=".$strRed."\n";
	if ($nbCharRed > 0)
	{
	    $RES2[scalar(@RES2)]=$strRed;
	}
    }
    @RES2;
}
# There is still work to be done to have the MySplit working correctly
# need to work on that.



sub ExtractFromInputLine($)
{
    my ($TheLine)=@_;
    my $strSPKbis="\\";
    $strSPKbis=$strSPKbis."input";
    my @V2=split($strSPKbis, $TheLine);
    if ($V2[0] ne "\\")
    {
	return "Z6PO_WVJJFHHNSD";
#	print "LINE=".$TheLine;
#	print "You break the rule on the inputs\n";
#	die;
    }
    my @V3=split("}", $V2[1]);
    $_=$V3[0];
    s/ //;
    s/{//;
    s/\n//;
    return $_
}



#@VSL=MySplit("rr", "hjh9_rr_JJ_rr_hRRjkl_rrRR");
#@VSL=MySplit("rr", "hjh9_rr_JJJ_rr_HJK9");
#@VSL=MySplit("\\input", "hjh9_\\inputRR");
#for ($iCase=1; $iCase<=scalar(@VSL); $iCase++)
#{
#    print "iCase=".$iCase."  str=".$VSL[$iCase-1]."\n";
#}
#die;



sub ExtractFileNameFromLine($)
{
    my ($line)=@_;
    $_=$line;
    s/\n//;
    $line=$_;
    my @V=split("input", $line);
    if (scalar(@V) >2)
    {
	print "You broke the assumption of only one file per line\n";
	die;
    }
    if (scalar(@V) > 1)
    {
#	print "V[0]=".$V[0]."\n";
#	print "V[1]=".$V[1]."\n";
	my $file=ExtractFromInputLine($line);
	return $file;
    }
    return "Z6PO_WVJJFHHNSD";
}


sub PercentSplitting($)
{
    my ($strToSplit) = @_;
    my @U=split("%", $strToSplit);
    my $retPercentSplit=$U[0];
    for (my $idxSplit=1; $idxSplit<=scalar(@U)-1; $idxSplit++)
    {
	my @Lsplit=split("", $U[$idxSplit-1]);
	my $len=scalar(@Lsplit);
	if ($len > 0 && $Lsplit[$len-1] ne "\\")
	{
	    $retPercentSplit=$retPercentSplit."%".$U[$idxSplit];
	}
	else
	{
	    return $retPercentSplit;
	}
    }
#    print "eLine=".$strToSplit."\n";
#    print "retLine=".$retPercentSplit."\n";
    return $retPercentSplit;
}


sub ListCall($)
{
    my ($FileName)=@_;
    my @MatchedSymbol=();
    open(INFILE, $FileName) or die "impossible to open ".$FileName;
    my @B=<INFILE>;
    close(INFILE);
    for (my $iLine=1; $iLine<=scalar(@B); $iLine++)
    {
	my $line=$B[$iLine-1];
	my $eLinePercSplit=PercentSplitting($line);
	my $file=ExtractFileNameFromLine($eLinePercSplit);
	if ($file ne "Z6PO_WVJJFHHNSD")
	{
	    $MatchedSymbol[scalar(@MatchedSymbol)]=$file;
	}
    }
    @MatchedSymbol;
}

sub GetTheSuffix($)
{
    my ($TheLine)=@_;
    my @V2=split("", $TheLine);
    my @ListIndices=();
    for (my $iChar=1; $iChar<=scalar(@V2); $iChar++)
    {
	if ($V2[$iChar-1] eq ".")
	{
	    $ListIndices[scalar(@ListIndices)]=$iChar;
	}
    }
    my $LimitChar;
    if (scalar(@ListIndices) eq 0)
    {
	$LimitChar=scalar(@V2)+1;
    }
    else
    {
	$LimitChar=$ListIndices[scalar(@ListIndices)-1]+1;
    }
    my $suffix="";
    for (my $iChar=$LimitChar; $iChar<=scalar(@V2); $iChar++)
    {
	$suffix=$suffix.$V2[$iChar-1];
    }
    return $suffix;
}



sub GetThePrefix($)
{
    my ($TheLine)=@_;
    my @V2=split("", $TheLine);
    my @ListIndices=();
    for (my $iChar=1; $iChar<=scalar(@V2); $iChar++)
    {
	if ($V2[$iChar-1] eq ".")
	{
	    $ListIndices[scalar(@ListIndices)]=$iChar;
	}
    }
    my $LimitChar;
    if (scalar(@ListIndices) eq 0)
    {
	$LimitChar=scalar(@V2)+1;
    }
    else
    {
	$LimitChar=$ListIndices[scalar(@ListIndices)-1]-1;
    }
    my $prefix="";
    for (my $iChar=1; $iChar<=$LimitChar; $iChar++)
    {
	$prefix=$prefix.$V2[$iChar-1];
    }
    return $prefix;
}

sub ShallFileBeOpenedAtAll($)
{
    my ($TheLine)=@_;
    my $suffix=GetTheSuffix($TheLine);
    if ($suffix eq "")
    {
	return 0;
    }
    if ($suffix eq "tex" || $suffix eq "latex" || $suffix eq "pdf_t" || $suffix eq "pstex_t")
    {
	return 1;
    }
    if ($suffix eq "sty")
    {
	return 0;
    }
    if ($suffix eq "pstex" || $suffix eq "ps" || $suffix eq "pdf" || $suffix eq "eps")
    {
	return 0;
    }
    return 0;
}


my @ListFileNames=();
my @Openable=();
my @ListFileStatus=();
sub FuncInsertInDatabase($)
{
    my ($FileName)=@_;
    for (my $kFile=1; $kFile<=scalar(@ListFileNames); $kFile++)
    {
	if ($ListFileNames[$kFile-1] eq $FileName)
	{
	    return;
	}
    }
    open(INFILE, $FileName) or die "impossible to open ".$FileName;
    close(INFILE);
    my $insertVal=scalar(@ListFileNames);
    $ListFileNames[$insertVal]=$FileName;
    $ListFileStatus[$insertVal]=0;
    $Openable[$insertVal]=ShallFileBeOpenedAtAll($FileName);
}



for (my $i=1; $i<=scalar(@ARGV); $i++)
{
    my $NewFile=$ARGV[$i-1];
    FuncInsertInDatabase($NewFile);
}


while(1)
{
    my $nbEntry=scalar(@ListFileNames);
    my $IsFinished=1;
    for (my $iFile=1; $iFile<=$nbEntry; $iFile++)
    {
	my $FileName=$ListFileNames[$iFile-1];
	my $test=$Openable[$iFile-1];
	if ($ListFileStatus[$iFile-1] eq 0)
	{
	    $ListFileStatus[$iFile-1]=1;
	    $IsFinished=0;
	    if ($test eq 1)
	    {
		my @VSYMB=ListCall($FileName);
		for (my $iSymb=1; $iSymb<=scalar(@VSYMB); $iSymb++)
		{
		    my $NewFile=$VSYMB[$iSymb-1];
		    FuncInsertInDatabase($NewFile);
		}
	    }
	}
    }
    if ($IsFinished eq 1)
    {
	last;
    }
}



my @LISTREF=();
my @NumberDEF=();
my @NumberCIT=();
my @PositionBIBITEM=();
my @PositionCITE=();
my $idxCite=0;
my $idxBibitem=0;
sub FuncInsertRef($$)
{
    my ($TheWorkCit, $status) = @_;
    for (my $jCit=1; $jCit<=scalar(@LISTREF); $jCit++)
    {
	if ($LISTREF[$jCit-1] eq $TheWorkCit)
	{
	    if ($status eq "cite")
	    {
		if ($NumberCIT[$jCit-1] == 0)
		{
		    $idxCite++;
		    $PositionCITE[$jCit-1]=$idxCite;
		}
		$NumberCIT[$jCit-1]++;
	    }
	    if ($status eq "bibitem")
	    {
		if ($NumberDEF[$jCit-1] == 0)
		{
		    $idxBibitem++;
		    $PositionBIBITEM[$jCit-1]=$idxBibitem;
		}
		$NumberDEF[$jCit-1]++;
	    }
	    return;
	}
    }
    my $insertVal=scalar(@LISTREF);
    $LISTREF[$insertVal]=$TheWorkCit;
    if ($status eq "cite")
    {
	$NumberCIT[$insertVal]=1;
	$NumberDEF[$insertVal]=0;
	$idxCite++;
	$PositionCITE[$insertVal]=$idxCite;
	$PositionBIBITEM[$insertVal]=-1;
    }
    if ($status eq "bibitem")
    {
	$NumberCIT[$insertVal]=0;
	$NumberDEF[$insertVal]=1;
	$idxBibitem++;
	$PositionCITE[$insertVal]=-1;
	$PositionBIBITEM[$insertVal]=$idxBibitem;
    }
}


sub FuncReadLineAndInsert($)
{
    my ($TheString) = @_;
    my @L1=split("citep", $TheString);
    my @L2=();
    for (my $i1=1; $i1<=scalar(@L1); $i1++)
    {
	my @CE=split("citet", $L1[$i1-1]);
	for (my $iCE=1; $iCE<=scalar(@CE); $iCE++)
	{
	    $L2[scalar(@L2)]=$CE[$iCE-1];
	}
    }
    my @L3=();
    for (my $i2=1; $i2<=scalar(@L2); $i2++)
    {
	my @CE=split("cite", $L2[$i2-1]);
	for (my $iCE=1; $iCE<=scalar(@CE); $iCE++)
	{
	    $L3[scalar(@L3)]=$CE[$iCE-1];
	}
    }
    for (my $iL=2; $iL<=scalar(@L3); $iL++)
    {
	my $PrevPart=$L3[$iL-2];
	my @VCL=split("", $PrevPart);
	if ($VCL[scalar(@VCL)-1] eq "\\")
	{
	    my $ePart=$L3[$iL-1];
	    my @VCL3=split("{", $ePart);
	    my $RelPart=$VCL3[1];
	    my @SL=split("}", $RelPart);
	    my $TheCit=$SL[0];
	    my @ListCits=split(",", $TheCit);
	    for (my $iCit=1; $iCit<=scalar(@ListCits); $iCit++)
	    {
		my $RealCit=$ListCits[$iCit-1];
		my @VE=split("", $RealCit);
		for (my $iChar=1; $iChar<=scalar(@VE); $iChar++)
		{
		    my $eChar=$VE[$iChar-1];
		    if ($eChar eq " ")
		    {
			print "The citation \\cite{".$TheCit."} is incorrect\n";
			die;
		    }
		}
		FuncInsertRef($RealCit, "cite");
	    }
	}
    }
}

my $nbEntryFile=scalar(@ListFileNames);
for (my $iFile=1; $iFile<=$nbEntryFile; $iFile++)
{
    my $FileName=$ListFileNames[$iFile-1];
    my $test=$Openable[$iFile-1];
    if ($test eq 1)
    {
	open(INFILE, $FileName);
#	print "open FileName=".$FileName."\n";
	while(<INFILE>)
	{
	    my $eLine=$_;
	    my $strSplPerc=PercentSplitting($eLine);
	    FuncReadLineAndInsert($strSplPerc);
	    my @L2=split("bibitem", $strSplPerc);
	    if (scalar(@L2) eq 2)
	    {
		my @V1=split("\]", $L2[1]);
		if (scalar(@V1) eq 2)
		{
		    my @V2=split("{", $V1[1]);
		    my @V3=split("}", $V2[1]);
		    FuncInsertRef($V3[0], "bibitem");
		}
		else
		{
		    my @V2=split("{", $L2[1]);
		    my @V3=split("}", $V2[1]);
		    FuncInsertRef($V3[0], "bibitem");
		}
	    }
	}
	close(INFILE);
    }
}

my @CorrectREF=();
my @CorrectNB=();
for (my $iCit=1; $iCit<=scalar(@LISTREF); $iCit++)
{
    my $TheCit=$LISTREF[$iCit-1];
    my $nbCIT=$NumberCIT[$iCit-1];
    my $nbDEF=$NumberDEF[$iCit-1];
    if ($nbDEF eq 1 && $nbCIT > 0)
    {
	$CorrectREF[scalar(@CorrectREF)]=$TheCit;
	$CorrectNB[scalar(@CorrectNB)]=$nbCIT;
    }
}

for (my $iCit=1; $iCit<=scalar(@CorrectREF)-1; $iCit++)
{
    for (my $jCit=$iCit+1; $jCit<=scalar(@CorrectREF); $jCit++)
    {
	if ($CorrectNB[$iCit-1] < $CorrectNB[$jCit-1])
	{
	    my $TheCit=$CorrectREF[$iCit-1];
	    my $nbCIT=$CorrectNB[$iCit-1];
	    #
	    $CorrectREF[$iCit-1]=$CorrectREF[$jCit-1];
	    $CorrectNB[$iCit-1]=$CorrectNB[$jCit-1];
	    #
	    $CorrectREF[$jCit-1]=$TheCit;
	    $CorrectNB[$jCit-1]=$nbCIT;
	}
    }
}

print "Statistics of correct references\n";
for (my $iCit=1; $iCit<=scalar(@CorrectREF)-1; $iCit++)
{
    print "Reference ".$CorrectREF[$iCit-1]." is cited ".$CorrectNB[$iCit-1]." times\n";
}


print "\n";
if (scalar(@CorrectREF) eq scalar(@LISTREF))
{
    print "All reference seems to be ok\n";
}
else
{
    print "Incorrect references\n";
    for (my $iCit=1; $iCit<=scalar(@LISTREF); $iCit++)
    {
	my $TheCit=$LISTREF[$iCit-1];
	my $nbCIT=$NumberCIT[$iCit-1];
	my $nbDEF=$NumberDEF[$iCit-1];
	if ($nbCIT eq 0)
	{
	    print "Reference ".$TheCit." is not cited\n";
	}
	if ($nbDEF eq 0)
	{
	    print "Reference ".$TheCit." is not defined in the bibliography\n";
	}
	if ($nbDEF > 1)
	{
	    print "Reference ".$TheCit." is defined several times in the bibliography\n";
	}
    }
}
if (scalar(@CorrectREF) eq scalar(@LISTREF))
{
    for (my $iCit=1; $iCit<=scalar(@LISTREF); $iCit++)
    {
	my $TheCit=$LISTREF[$iCit-1];
	my $pos1=$PositionCITE[$iCit-1];
	my $pos2=$PositionBIBITEM[$iCit-1];
	if ($pos1 ne $pos2)
	{
	    print "Citation ".$TheCit." CiteRank=".$pos1." BibitemRank=".$pos2."\n";
	}
    }


}

print "NOTE: this program complements latex reference system.\n";
print "it does not dispense from reading the .log file\n";
